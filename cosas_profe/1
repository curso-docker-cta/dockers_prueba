
wget ftp://ftp.ripe.net/ripe/dbase/ripe.db.gz   30M-40M
split -l 10000000 ripe.db


Ejercicio 1: obtén todas las redes objetivo en formato CIDR:
+1+1+1+1+1+1

grep -B4 -i -E "bank|banco|banque|sparkasse" ripe.db | grep ^ine | cut -c18- | tr -d " " | xargs -I {} ipcalc {} | grep -v ^d

for line in $(grep -B 3 -i -e 'banque' -e 'bank' xad | grep ^inetnum | cut -d":" -f2 | tr -d ' '); do ipcalc $line | grep -v ^dea ; done

for line in `egrep -B 3 -i 'bank|banco' xad |grep ^inetnum |cut -d":" -f2 |tr -d " "`; do ipcalc $line |grep -v deag; done

grep -iE BANK\*\|Banco\*  -B 4 xaa | grep inetnum | cut -d':' -f2 | tr -d ' ' | while read -r line; do ipcalc "$line"; done | grep -v deaggregate\*

grep -i -E "^descr: \+(bank|caja|banc|kasse)" xad -B 5 |grep inetnum:|awk '{print $2 "-" $4}'|xargs -I {} ipcalc {}|grep -v deaggregate

grep -B 3 -E "bank|banco|banque"    ripe.db  >>ripe.old
grep inetnum ripe.old  >ripe.old1
cat ripe.old1 | xargs -I {} ipcalc {} 

Ejercicio 2: Construye una jaula en la que tan sólo puedan ejecutarse los comandos bash, ls, ps, mount, mkdir, mknod, fdisk
+1+1

#!/bin/bash

which=$(which $1)
mkdir -p $2/$(dirname $which)
cp $which $2/$which
ldd $which | grep "/"  | cut -d ">" -f2 | cut -d"(" -f1 | tr -d " \t" | while read linea;
do
    mkdir -p $2$(dirname $linea)
    cp $linea $2$linea
done


Ejercicio 3: Edita tu sources.list.d/ para añadir los repositorios de la última versión de firefox (no la estándard de Ubuntu) y de grafana.
+1
+1


Ejercicio 4: instala el servidor SSH, vim-nox, chromium-browser y la llave SSH del profe en el usuario root de tu sistema

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO8YbfFb7Lp4HkUn/p3ARktUjDYEUEuvgWptBSxw676w linux@profe.cta.lan
+1



Si  necesitas refuerzo en shellscripting o quieres hacer más cosas,  haz en  casa un shellscript "volcador" de datos de DNS o bien un identificador  de errores en red. * pregunta al profe


----------------------------------------------------------------

    Crea una cuenta en GitHub o Bitbucket

    Crea una cuenta en hub.docker.com

------------------------------------------------------------------------------------------------------

Lanza: ubuntu, centos, debian, php:apache
Utiliza "-d" para lo que sean servicios.
Utiliza ctrl +PQ para desconectar de un contenedor sin finalizarlo
Reconecta a un contenedor ( docker attach )
Ejecuta un binario dentro de un contenedor en ejecución ( docker exec )
Busca una plataforma/aplicación compleja y lánzala con Docker

---------------------------------------------------------------------------------------------------------

    docker run

    -d

    -t

    -i

    -p

    -v

    --name

---------------------------------------------------------------------------------------
SEGUNDA SESIÓN:

MANPAGE:

FROM library/debian:wheezy
MAINTAINER kenneth@floss.es
RUN apt-get update &&  \
        apt-get -y install man funny-manpages
#       rm -rf /var/cache/apt /var/lib/{apt,dpkg}
ENTRYPOINT [ "/usr/bin/man" ]
CMD [ "ls" ]

PINGER:
FROM library/debian:wheezy
MAINTAINER kenneth@floss.es


-----> por defecto lanzará "man ls", si ejecutamos el contenedor con el argumento "date", hará "man date"

docker build -t miimg ,
docker run -ti miimg 
docker run -ti miimg date
docker run -ti miimg 1fun date

---------------------------------------------------------------------------------------------------

Ejecución dentro del contenedor = [ENTRYPOINT] + [CMD]
El CMD se puede modificar con los argumentos que escribimos tras el nombre de la img a ejecutar, por lo que en ocasiones nos interesará más definir el Entrypoint que no el CMD



---------------------------------------------------------------------------------------------------

    1) Monta un contenedor basado en Debian:jessie capaz de ejecutar PHP desde Apache, con los módulos más habituales: libapache2-mod-php5 php5-mysql php5-gd ....

    Utiliza ENTRYPOINT y EXPOSE+1+1+1+1+1+1+1+1+1+1+1+1+1+1

    Idealmente, también habilitaremos los módulos de rewrite, headers y ssl, y deshabilitaremos el módulo "status".+1+1+1+1+1+1+1+1+1+1+1+1+1

    Si sabes lo que te haces, mejora la configuración de apache :-) En esta fase te puedes copiar del Dockerfile triste del profe.+1+1

    2) Haz que los logs de apache aparezcan "por pantalla" (docker run -ti)  o sean visibles haciendo docker logs "nombredelcontenedor". Para ello tendrás que enlazar access.log y error.log a /dev/stdout y /dev/stderr.+1+1+1+1+1+1+1+1

     http://pad.atkn.net/up/W35AFkGBQR0N8qeuFmhNrSt3eGQ-.Dockerfile 

     http://pad.atkn.net/up/rZEnHBjmQaMf1eCwFxtJz4z5egI-.Dockerfile 

    http://pad.atkn.net/up/cSogh3O4lcpCN-XXG37i3oNJBKU-.Dockerfile 

     http://pad.atkn.net/up/6SWrE8+cg0muHRpxOQPs4jRGXJo-.Dockerfile 

     http://pad.atkn.net/up/z3se8bm0BhtkOMHfjoHbuchZ51U-.Dockerfile 

    http://pad.atkn.net/up/7LpkRBH+2DOH0P1uSVoXmaj11TM-.Dockerfile 

     http://pad.atkn.net/up/EHzGzicHgG3jJSKPnSb38nZa354-.Dockerfile   http://pad.atkn.net/up/STl1ux+aG-Pnx7SFfgtSsPf9o9Q-.Dockerfile 


    3) Crea un script de bootstrapping que pueda descargar un archivo especificado en una variable de entorno y desplegarlo en la raíz del servidor web. Con ello conseguiremos un contenedor "wildcard" que nos permita ejecutar cualquier app PHP+MySQL+1+1+1

    Que soporte el desempaquetado de:

    tar.gz

    tar.bz2

    tar.xz

    zip


    ¿Lo dejamos para casa?

-----------------------------------------------------------------------------------------------------------

root@profe:/# docker tag pinger kpeiruza/pinger
root@profe:/# docker push kpeiruza/pinger
The push refers to a repository [docker.io/kpeiruza/pinger]
5d6cbe0dbcf9: Pushed 
docker runlatest: digest: sha256:8d6e698d3a1ea2c2c20132f0435cc50fb043c389777ae28d4a87cdbc6ad0f747 size: 529
root@profe:/# docker run -ti kpeiruza/pinger
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: icmp_seq=0 ttl=54 time=13.891 ms
64 bytes from 8.8.8.8: icmp_seq=1 ttl=54 time=13.868 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=54 time=13.670 ms
--- 8.8.8.8 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max/stddev = 13.670/13.810/13.891/0.099 ms

-------------------------------------------------------------------------------------------------------------------------------

    4) haz login en docker (docker login) y sube una imágen "binaria" a tu cuenta:+1+1

    1) login

    2) etiqueta (docker tag imgname username/newname[:tag]

    3) haz docker push username/newname[:tag]

    4) valida que ha funcionado con docker run ...... username/newname[:tag]

    5) Crea un repositorio en git, añade tu Dockerfile+1+1





linux@profe:~$ docker inspect mysql -f '{{.NetworkSettings.IPAddress}}'
172.17.0.2



